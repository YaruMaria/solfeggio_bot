import asyncio
import logging
import sqlite3
import random
import hashlib
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
import os
from pathlib import Path
from config import BOT_TOKEN
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('user.db')
cursor = conn.cursor()

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º
BASE_DIR = Path(__file__).parent
MEDIA_DIR = BASE_DIR / "media"
AUDIO_DIR = MEDIA_DIR / "audio_notes"

if not MEDIA_DIR.exists():
    MEDIA_DIR.mkdir()
    logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞: {MEDIA_DIR}")

if not AUDIO_DIR.exists():
    AUDIO_DIR.mkdir()
    logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ: {AUDIO_DIR}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS music_progress (
    user_id INTEGER,
    test_type TEXT,
    score INTEGER,
    last_attempt TEXT,
    PRIMARY KEY (user_id, test_type)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS voice_notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    song_name TEXT,
    voice_file_id TEXT,
    submission_time TEXT,
    status TEXT DEFAULT 'pending',
    FOREIGN KEY (user_id) REFERENCES users (user_id)
);
''')
conn.commit()

CLEFS_DATA = {
    "treble": {
        "name": "–°–∫—Ä–∏–ø–∏—á–Ω—ã–π –∫–ª—é—á",
        "description": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–æ—Ç",
        "image_path": str(MEDIA_DIR / "treble_clef.png")
    },
    "bass": {
        "name": "–ë–∞—Å–æ–≤—ã–π –∫–ª—é—á",
        "description": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∏–∑–∫–∏—Ö –Ω–æ—Ç",
        "image_path": str(MEDIA_DIR / "bass_clef.png")
    }
}


class Scales(Enum):
    C_MAJOR = "–¥–æ –º–∞–∂–æ—Ä"
    G_MAJOR = "—Å–æ–ª—å –º–∞–∂–æ—Ä"
    D_MAJOR = "—Ä–µ –º–∞–∂–æ—Ä"
    A_MAJOR = "–ª—è –º–∞–∂–æ—Ä"
    E_MAJOR = "–º–∏ –º–∞–∂–æ—Ä"
    B_MAJOR = "—Å–∏ –º–∞–∂–æ—Ä"
    F_MAJOR = "—Ñ–∞ –º–∞–∂–æ—Ä"


SCALE_DEGREES = {
    1: "I (—Ç–æ–Ω–∏—á–µ—Å–∫–∞—è)",
    2: "II (–Ω–∏—Å—Ö–æ–¥—è—â–∏–π –≤–≤–æ–¥–Ω—ã–π)",
    3: "III (–º–µ–¥–∏–∞–Ω—Ç–∞)",
    4: "IV (—Å—É–±–¥–æ–º–∏–Ω–∞–Ω—Ç–∞)",
    5: "V (–¥–æ–º–∏–Ω–∞–Ω—Ç–∞)",
    6: "VI (—Å—É–±–º–µ–¥–∏–∞–Ω—Ç–∞)",
    7: "VII (–≤–æ—Å—Ö–æ–¥—è—â–∏–π –≤–≤–æ–¥–Ω—ã–π)"
}

STABLE_DEGREES = {
    "–¥–æ –º–∞–∂–æ—Ä": ["–¥–æ", "–º–∏", "—Å–æ–ª—å"],
    "—Å–æ–ª—å –º–∞–∂–æ—Ä": ["—Å–æ–ª—å", "—Å–∏", "—Ä–µ"],
    "—Ä–µ –º–∞–∂–æ—Ä": ["—Ä–µ", "—Ñ–∞", "–ª—è"],
    "–ª—è –º–∞–∂–æ—Ä": ["–ª—è", "–¥–æ", "–º–∏"],
    "–º–∏ –º–∞–∂–æ—Ä": ["–º–∏", "—Å–æ–ª—å", "—Å–∏"],
    "—Å–∏ –º–∞–∂–æ—Ä": ["—Å–∏", "—Ä–µ", "—Ñ–∞"],
    "—Ñ–∞ –º–∞–∂–æ—Ä": ["—Ñ–∞", "–ª—è", "–¥–æ"],
    "–ª—è –º–∏–Ω–æ—Ä": ["–ª—è", "–¥–æ", "–º–∏"],
    "–º–∏ –º–∏–Ω–æ—Ä": ["–º–∏", "—Å–æ–ª—å", "—Å–∏"],
    "—Å–∏ –º–∏–Ω–æ—Ä": ["—Å–∏", "—Ä–µ", "—Ñ–∞"],
    "—Ñ–∞# –º–∏–Ω–æ—Ä": ["—Ñ–∞", "–ª—è", "–¥–æ"],
    "–¥–æ# –º–∏–Ω–æ—Ä": ["–¥–æ", "–º–∏", "—Å–æ–ª—å"],
    "—Å–æ–ª—å# –º–∏–Ω–æ—Ä": ["—Å–æ–ª—å", "—Å–∏", "—Ä–µ"],
    "—Ä–µ –º–∏–Ω–æ—Ä": ["—Ä–µ", "—Ñ–∞", "–ª—è"],
    "—Å–æ–ª—å –º–∏–Ω–æ—Ä": ["—Å–æ–ª—å", "—Å–∏", "—Ä–µ"],
    "–¥–æ –º–∏–Ω–æ—Ä": ["–¥–æ", "–º–∏", "—Å–æ–ª—å"],
    "—Ñ–∞ –º–∏–Ω–æ—Ä": ["—Ñ–∞", "–ª—è", "–¥–æ"]
}

conn.commit()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}


# –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(F.text == "–£—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏")
async def stable_degrees_game(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
    all_tonalities = list(STABLE_DEGREES.keys())

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–≥—Ä–∞–ª, –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    previous_tonality = user_states.get(user_id, {}).get("tonality")
    available_tonalities = [t for t in all_tonalities if
                            t != previous_tonality] if previous_tonality else all_tonalities

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    tonality = random.choice(available_tonalities)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        "mode": "stable_degrees",
        "tonality": tonality,
        "correct_answers": STABLE_DEGREES[tonality],
        "selected_notes": [],
        "score": user_states.get(user_id, {}).get("score", 0),
        "total": user_states.get(user_id, {}).get("total", 0) + 1
    }

    await message.answer(
        f"üéµ –í—ã–±–µ—Ä–∏—Ç–µ –£–°–¢–û–ô–ß–ò–í–´–ï —Å—Ç—É–ø–µ–Ω–∏ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ {tonality}:\n"
        "(–ù–∞–∂–º–∏—Ç–µ 3 –Ω–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏)",
        reply_markup=get_stable_degrees_keyboard()
    )


def get_stable_degrees_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¥–æ"), KeyboardButton(text="—Ä–µ"), KeyboardButton(text="–º–∏")],
            [KeyboardButton(text="—Ñ–∞"), KeyboardButton(text="—Å–æ–ª—å"), KeyboardButton(text="–ª—è")],
            [KeyboardButton(text="—Å–∏"), KeyboardButton(text="–ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


@dp.message(F.text.in_(["–¥–æ", "—Ä–µ", "–º–∏", "—Ñ–∞", "—Å–æ–ª—å", "–ª—è", "—Å–∏"]))
async def process_note_selection(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if user_state.get("mode") != "stable_degrees":
        return

    selected_note = message.text.lower()
    selected_notes = user_state.get("selected_notes", [])

    if selected_note in selected_notes:
        # –ï—Å–ª–∏ –Ω–æ—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - —É–±–∏—Ä–∞–µ–º –µ—ë
        selected_notes.remove(selected_note)
        await message.answer(f"–ù–æ—Ç–∞ {selected_note} —É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±–æ—Ä–∞")
    else:
        if len(selected_notes) >= 3:
            await message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ 3 –Ω–æ—Ç—ã. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        selected_notes.append(selected_note)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ—Ç–∞ {selected_note}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state["selected_notes"] = selected_notes
    user_states[user_id] = user_state

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
    if selected_notes:
        await message.answer(f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_notes)}")


@dp.message(F.text == "–ì–æ—Ç–æ–≤–æ")
async def check_stable_degrees(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if user_state.get("mode") != "stable_degrees":
        return

    selected_notes = user_state.get("selected_notes", [])
    correct_answers = user_state.get("correct_answers", [])
    tonality = user_state.get("tonality", "")

    if len(selected_notes) != 3:
        await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 3 –Ω–æ—Ç—ã!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = set(selected_notes) == set(correct_answers)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if is_correct:
        user_state["score"] += 1
    user_states[user_id] = user_state

    if is_correct:
        response = (
            "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏!\n"
            f"–í —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ {tonality} —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏: {', '.join(correct_answers)}\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é..."
        )
    else:
        response = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.\n"
            f"–í —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ {tonality} —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏: {', '.join(correct_answers)}\n"
            "(–£—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏ - —ç—Ç–æ I, III –∏ V —Å—Ç—É–ø–µ–Ω–∏ –≥–∞–º–º—ã)\n"
            "–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑!"
        )

    await message.answer(response)

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    await asyncio.sleep(2)

    # –ó–∞–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –¥—Ä—É–≥–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    await stable_degrees_game(message)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1 –∫–ª–∞—Å—Å"), KeyboardButton(text="2 –∫–ª–∞—Å—Å")],
            [KeyboardButton(text="3 –∫–ª–∞—Å—Å"), KeyboardButton(text="4 –∫–ª–∞—Å—Å")],
            [KeyboardButton(text="5 –∫–ª–∞—Å—Å"), KeyboardButton(text="6 –∫–ª–∞—Å—Å")],
            [KeyboardButton(text="7 –∫–ª–∞—Å—Å")],
            [KeyboardButton(text="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"), KeyboardButton(text="–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")]
        ],
        resize_keyboard=True
    )


def get_class_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–æ—Ç—ã")],
            [KeyboardButton(text="–°—Ç—Ä–æ–µ–Ω–∏–µ –≥–∞–º–º—ã")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def get_music_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–ª—é—á–∏")],
            [KeyboardButton(text="–ù–æ—Ç—ã –≤ —Å–∫—Ä–∏–ø–∏—á–Ω–æ–º –∫–ª—é—á–µ")],
            [KeyboardButton(text="–ù–æ—Ç—ã –≤ –±–∞—Å–æ–≤–æ–º –∫–ª—é—á–µ")],
            [KeyboardButton(text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞")],
            [KeyboardButton(text="–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ—Ç")],
            [KeyboardButton(text="–ù–æ—Ç—ã –Ω–∞ —Å–ª—É—Ö")],
            [KeyboardButton(text="–ù–æ—Ç—ã –≤ –ø–µ—Å–Ω—è—Ö")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def get_first_class_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–æ—Ç—ã")],
            [KeyboardButton(text="–°—Ç—Ä–æ–µ–Ω–∏–µ –≥–∞–º–º—ã")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def get_clef_quiz_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–∫—Ä–∏–ø–∏—á–Ω—ã–π"), KeyboardButton(text="–ë–∞—Å–æ–≤—ã–π")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def get_note_quiz_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ"), KeyboardButton(text="–†–µ")],
            [KeyboardButton(text="–ú–∏"), KeyboardButton(text="–§–∞")],
            [KeyboardButton(text="–°–æ–ª—å"), KeyboardButton(text="–õ—è")],
            [KeyboardButton(text="–°–∏"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def get_note_letters_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="C"), KeyboardButton(text="D")],
            [KeyboardButton(text="E"), KeyboardButton(text="F")],
            [KeyboardButton(text="G"), KeyboardButton(text="A")],
            [KeyboardButton(text="B"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

@dp.message(F.text == "–°—Ç—Ä–æ–µ–Ω–∏–µ –≥–∞–º–º—ã")
async def scale_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç—É–ø–µ–Ω–∏ –≤ –≥–∞–º–º–µ")],
            [KeyboardButton(text="–£—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏")],
            [KeyboardButton(text="–ù–µ—É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏")],  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≥–∞–º–º–∞–º:",
        reply_markup=keyboard
    )


def get_songs_keyboard():
    songs_buttons = [
        [KeyboardButton(text=song_name)] for song_name in SONGS.keys()
    ]
    songs_buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=songs_buttons, resize_keyboard=True)


def get_review_keyboard(submission_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –û—Ç–ª–∏—á–Ω–æ (5)", callback_data=f"review_{submission_id}_5"),
            InlineKeyboardButton(text="üòä –•–æ—Ä–æ—à–æ (4)", callback_data=f"review_{submission_id}_4"),
        ],
        [
            InlineKeyboardButton(text="ü§î –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (3)", callback_data=f"review_{submission_id}_3"),
            InlineKeyboardButton(text="üëé –ù–∞–¥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å (2)", callback_data=f"review_{submission_id}_2"),
        ]
    ])


# –°–ª–æ–≤–∞—Ä–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
NOTES_TREBLE = {
    "–¥–æ": {"image_path": str(MEDIA_DIR / "treble_nots/treble_do.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ä–µ": {"image_path": str(MEDIA_DIR / "treble_nots/treble_re.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–º–∏": {"image_path": str(MEDIA_DIR / "treble_nots/treble_mi.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ñ–∞": {"image_path": str(MEDIA_DIR / "treble_nots/treble_fa.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–æ–ª—å": {"image_path": str(MEDIA_DIR / "treble_nots/treble_sol.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–ª—è": {"image_path": str(MEDIA_DIR / "treble_nots/treble_la.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–∏": {"image_path": str(MEDIA_DIR / "treble_nots/treble_si.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–¥–æ2": {"image_path": str(MEDIA_DIR / "treble_nots/treble_do2.png"), "octave": "–≤—Ç–æ—Ä–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ä–µ2": {"image_path": str(MEDIA_DIR / "treble_nots/treble_re2.png"), "octave": "–≤—Ç–æ—Ä–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–º–∏2": {"image_path": str(MEDIA_DIR / "treble_nots/treble_mi2.png"), "octave": "–≤—Ç–æ—Ä–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ñ–∞2": {"image_path": str(MEDIA_DIR / "treble_nots/treble_fa2.png"), "octave": "–≤—Ç–æ—Ä–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–æ–ª—å2": {"image_path": str(MEDIA_DIR / "treble_nots/treble_sol2.png"), "octave": "–≤—Ç–æ—Ä–æ–π –æ–∫—Ç–∞–≤—ã"},
}

NOTES_BASS = {
    "–¥–æ_–±": {"image_path": str(MEDIA_DIR / "bass_nots/bass_do_big.png"), "octave": "–±–æ–ª—å—à–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ä–µ_–±": {"image_path": str(MEDIA_DIR / "bass_nots/bass_re_big.png"), "octave": "–±–æ–ª—å—à–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–º–∏_–±": {"image_path": str(MEDIA_DIR / "bass_nots/bass_mi_big.png"), "octave": "–±–æ–ª—å—à–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ñ–∞_–±": {"image_path": str(MEDIA_DIR / "bass_nots/bass_fa_big.png"), "octave": "–±–æ–ª—å—à–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–æ–ª—å_–±": {"image_path": str(MEDIA_DIR / "bass_nots/bass_sol_big.png"), "octave": "–±–æ–ª—å—à–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–ª—è_–º": {"image_path": str(MEDIA_DIR / "bass_nots/bass_la_small.png"), "octave": "–º–∞–ª–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–∏_–º": {"image_path": str(MEDIA_DIR / "bass_nots/bass_si_small.png"), "octave": "–º–∞–ª–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–¥–æ_–º": {"image_path": str(MEDIA_DIR / "bass_nots/bass_do_small.png"), "octave": "–º–∞–ª–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ä–µ_–º": {"image_path": str(MEDIA_DIR / "bass_nots/bass_re_small.png"), "octave": "–º–∞–ª–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–º–∏_–º": {"image_path": str(MEDIA_DIR / "bass_nots/bass_mi_small.png"), "octave": "–º–∞–ª–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ñ–∞_–º": {"image_path": str(MEDIA_DIR / "bass_nots/bass_fa_small.png"), "octave": "–º–∞–ª–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–æ–ª—å_–º": {"image_path": str(MEDIA_DIR / "bass_nots/bass_sol_small.png"), "octave": "–º–∞–ª–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–ª—è_1": {"image_path": str(MEDIA_DIR / "bass_nots/bass_la_first.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–∏_1": {"image_path": str(MEDIA_DIR / "bass_nots/bass_si_first.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–¥–æ_1": {"image_path": str(MEDIA_DIR / "bass_nots/bass_do_first.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ä–µ_1": {"image_path": str(MEDIA_DIR / "bass_nots/bass_re_first.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–º–∏_1": {"image_path": str(MEDIA_DIR / "bass_nots/bass_mi_first.png"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"}
}

KEYBOARD_NOTES = {
    "–¥–æ": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_do.jpg"), "octave": ""},
    "—Ä–µ": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_re.jpg"), "octave": ""},
    "–º–∏": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_mi.jpg"), "octave": ""},
    "—Ñ–∞": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_fa.jpg"), "octave": ""},
    "—Å–æ–ª—å": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_sol.jpg"), "octave": ""},
    "–ª—è": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_la.jpg"), "octave": ""},
    "—Å–∏": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_si.jpg"), "octave": ""},
    "–¥–æ2": {"image_path": str(MEDIA_DIR / "keyboard/keyboard_do2.jpg"), "octave": ""}
}

NOTE_LETTERS = {
    "C": {"image_path": str(MEDIA_DIR / "note_letters/note_C.png"), "name": "–î–æ (C)"},
    "D": {"image_path": str(MEDIA_DIR / "note_letters/note_D.png"), "name": "–†–µ (D)"},
    "E": {"image_path": str(MEDIA_DIR / "note_letters/note_E.png"), "name": "–ú–∏ (E)"},
    "F": {"image_path": str(MEDIA_DIR / "note_letters/note_F.png"), "name": "–§–∞ (F)"},
    "G": {"image_path": str(MEDIA_DIR / "note_letters/note_G.png"), "name": "–°–æ–ª—å (G)"},
    "A": {"image_path": str(MEDIA_DIR / "note_letters/note_A.png"), "name": "–õ—è (A)"},
    "B": {"image_path": str(MEDIA_DIR / "note_letters/note_B.png"), "name": "–°–∏ (B)"}
}

AUDIO_NOTES = {
    "–¥–æ": {"audio_path": str(AUDIO_DIR / "3f27a6.mp3"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ä–µ": {"audio_path": str(AUDIO_DIR / "8b1a99.mp3"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–º–∏": {"audio_path": str(AUDIO_DIR / "e4da3b.mp3"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Ñ–∞": {"audio_path": str(AUDIO_DIR / "a87ff6.mp3"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–æ–ª—å": {"audio_path": str(AUDIO_DIR / "e4da3c.mp3"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "–ª—è": {"audio_path": str(AUDIO_DIR / "8b1a98.mp3"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"},
    "—Å–∏": {"audio_path": str(AUDIO_DIR / "3f27a7.mp3"), "octave": "–ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã"}
}

SONGS = {
    "–í–æ –ø–æ–ª–µ –±–µ—Ä–µ–∑–∞ —Å—Ç–æ—è–ª–∞": {
        "image_path": str(MEDIA_DIR / "songs/berezka.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–í –ª–µ—Å—É —Ä–æ–¥–∏–ª–∞—Å—å —ë–ª–æ—á–∫–∞": {
        "image_path": str(MEDIA_DIR / "songs/elochka.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–ñ–∏–ª–∏ —É –±–∞–±—É—Å–∏": {
        "image_path": str(MEDIA_DIR / "songs/gusi.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–ö–∞–∫ –ø–æ–¥ –≥–æ—Ä–∫–æ–π": {
        "image_path": str(MEDIA_DIR / "songs/gora.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–ú–∞–∫–∏": {
        "image_path": str(MEDIA_DIR / "songs/maki.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–°–∞–≤–∫–∞ –∏ –ì—Ä–∏—à–∞": {
        "image_path": str(MEDIA_DIR / "songs/savka.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–í–∞—Å–∏–ª–µ–∫": {
        "image_path": str(MEDIA_DIR / "songs/vasilok.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–ö–∞—á–∏": {
        "image_path": str(MEDIA_DIR / "songs/kachi.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–Ø –≥—É–ª—è—é": {
        "image_path": str(MEDIA_DIR / "songs/ya_gulay.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
    "–ü–µ—Å–µ–Ω–∫–∞ –±–µ–∑ —Å–ª–æ–≤": {
        "image_path": str(MEDIA_DIR / "songs/bes_slov.png"),
        "notes": "",
        "level": "1 –∫–ª–∞—Å—Å"
    },
}

SCALE_NOTES = {
    Scales.C_MAJOR: ["–¥–æ", "—Ä–µ", "–º–∏", "—Ñ–∞", "—Å–æ–ª—å", "–ª—è", "—Å–∏"],
    Scales.G_MAJOR: ["—Å–æ–ª—å", "–ª—è", "—Å–∏", "–¥–æ", "—Ä–µ", "–º–∏", "—Ñ–∞"],
    Scales.D_MAJOR: ["—Ä–µ", "–º–∏", "—Ñ–∞", "—Å–æ–ª—å", "–ª—è", "—Å–∏", "–¥–æ"],
    Scales.A_MAJOR: ["–ª—è", "—Å–∏", "–¥–æ", "—Ä–µ", "–º–∏", "—Ñ–∞", "—Å–æ–ª—å"],
    Scales.E_MAJOR: ["–º–∏", "—Ñ–∞", "—Å–æ–ª—å", "–ª—è", "—Å–∏", "–¥–æ", "—Ä–µ"],
    Scales.B_MAJOR: ["—Å–∏", "–¥–æ", "—Ä–µ", "–º–∏", "—Ñ–∞", "—Å–æ–ª—å", "–ª—è"],
    Scales.F_MAJOR: ["—Ñ–∞", "—Å–æ–ª—å", "–ª—è", "—Å–∏b", "–¥–æ", "—Ä–µ", "–º–∏"]
}

UNSTABLE_DEGREES = {
    "–¥–æ –º–∞–∂–æ—Ä": ["—Ä–µ", "—Ñ–∞", "–ª—è", "—Å–∏"],
    "—Å–æ–ª—å –º–∞–∂–æ—Ä": ["–ª—è", "–¥–æ", "–º–∏", "—Ñ–∞"],
    "—Ä–µ –º–∞–∂–æ—Ä": ["–º–∏", "—Å–æ–ª—å", "—Å–∏", "–¥–æ"],
    "–ª—è –º–∞–∂–æ—Ä": ["—Å–∏", "—Ä–µ", "—Ñ–∞", "—Å–æ–ª—å"],
    "–º–∏ –º–∞–∂–æ—Ä": ["—Ñ–∞", "–ª—è", "–¥–æ", "—Ä–µ"],
    "—Å–∏ –º–∞–∂–æ—Ä": ["–¥–æ", "–º–∏", "—Å–æ–ª—å", "–ª—è"],
    "—Ñ–∞ –º–∞–∂–æ—Ä": ["—Å–æ–ª—å", "—Å–∏", "—Ä–µ", "–º–∏"],
    "–ª—è –º–∏–Ω–æ—Ä": ["—Å–∏", "—Ä–µ", "—Ñ–∞", "—Å–æ–ª—å"],
    "–º–∏ –º–∏–Ω–æ—Ä": ["—Ñ–∞", "–ª—è", "–¥–æ", "—Ä–µ"],
    "—Å–∏ –º–∏–Ω–æ—Ä": ["–¥–æ", "–º–∏", "—Å–æ–ª—å", "–ª—è"],
    "—Ñ–∞# –º–∏–Ω–æ—Ä": ["—Å–æ–ª—å", "—Å–∏", "—Ä–µ", "–º–∏"],
    "–¥–æ# –º–∏–Ω–æ—Ä": ["—Ä–µ", "—Ñ–∞", "–ª—è", "—Å–∏"],
    "—Å–æ–ª—å# –º–∏–Ω–æ—Ä": ["–ª—è", "–¥–æ", "–º–∏", "—Ñ–∞"],
    "—Ä–µ –º–∏–Ω–æ—Ä": ["–º–∏", "—Å–æ–ª—å", "—Å–∏", "–¥–æ"],
    "—Å–æ–ª—å –º–∏–Ω–æ—Ä": ["–ª—è", "–¥–æ", "–º–∏", "—Ñ–∞"],
    "–¥–æ –º–∏–Ω–æ—Ä": ["—Ä–µ", "—Ñ–∞", "–ª—è", "—Å–∏"],
    "—Ñ–∞ –º–∏–Ω–æ—Ä": ["—Å–æ–ª—å", "—Å–∏", "—Ä–µ", "–º–∏"]
}

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π
@dp.message(F.text == "–ù–µ—É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏")
async def unstable_degrees_game(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
    all_tonalities = list(UNSTABLE_DEGREES.keys())

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–≥—Ä–∞–ª, –∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    previous_tonality = user_states.get(user_id, {}).get("tonality")
    available_tonalities = [t for t in all_tonalities if
                            t != previous_tonality] if previous_tonality else all_tonalities

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    tonality = random.choice(available_tonalities)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {
        "mode": "unstable_degrees",
        "tonality": tonality,
        "correct_answers": UNSTABLE_DEGREES[tonality],
        "selected_notes": [],
        "score": user_states.get(user_id, {}).get("score", 0),
        "total": user_states.get(user_id, {}).get("total", 0) + 1
    }

    await message.answer(
        f"üéµ –í—ã–±–µ—Ä–∏—Ç–µ –ù–ï–£–°–¢–û–ô–ß–ò–í–´–ï —Å—Ç—É–ø–µ–Ω–∏ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ {tonality}:\n"
        "(–ù–∞–∂–º–∏—Ç–µ 4 –Ω–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏)",
        reply_markup=get_unstable_degrees_keyboard()
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π (4 –Ω–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å)
def get_unstable_degrees_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¥–æ"), KeyboardButton(text="—Ä–µ"), KeyboardButton(text="–º–∏")],
            [KeyboardButton(text="—Ñ–∞"), KeyboardButton(text="—Å–æ–ª—å"), KeyboardButton(text="–ª—è")],
            [KeyboardButton(text="—Å–∏"), KeyboardButton(text="–ì–æ—Ç–æ–≤–æ"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π)
@dp.message(F.text.in_(["–¥–æ", "—Ä–µ", "–º–∏", "—Ñ–∞", "—Å–æ–ª—å", "–ª—è", "—Å–∏"]))
async def process_note_selection(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if user_state.get("mode") not in ["stable_degrees", "unstable_degrees"]:
        return

    selected_note = message.text.lower()
    selected_notes = user_state.get("selected_notes", [])
    max_notes = 3 if user_state.get("mode") == "stable_degrees" else 4  # –î–ª—è –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö - 4 –Ω–æ—Ç—ã

    if selected_note in selected_notes:
        # –ï—Å–ª–∏ –Ω–æ—Ç–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ - —É–±–∏—Ä–∞–µ–º –µ—ë
        selected_notes.remove(selected_note)
        await message.answer(f"–ù–æ—Ç–∞ {selected_note} —É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±–æ—Ä–∞")
    else:
        if len(selected_notes) >= max_notes:
            await message.answer(f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ {max_notes} –Ω–æ—Ç—ã. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        selected_notes.append(selected_note)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ—Ç–∞ {selected_note}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state["selected_notes"] = selected_notes
    user_states[user_id] = user_state

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
    if selected_notes:
        await message.answer(f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_notes)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π
@dp.message(F.text == "–ì–æ—Ç–æ–≤–æ")
async def check_unstable_degrees(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if user_state.get("mode") != "unstable_degrees":
        return

    selected_notes = user_state.get("selected_notes", [])
    correct_answers = user_state.get("correct_answers", [])
    tonality = user_state.get("tonality", "")

    if len(selected_notes) != 4:
        await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–æ–≤–Ω–æ 4 –Ω–æ—Ç—ã!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ—Ç—ã –µ—Å—Ç—å –≤ correct_answers
    is_correct = all(note in correct_answers for note in selected_notes) and \
                 len(selected_notes) == len(correct_answers)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if is_correct:
        user_state["score"] += 1
        response = (
            "‚úÖ –í–µ—Ä–Ω–æ! –ù–µ—É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏ –≤ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ "
            f"{tonality}: {', '.join(correct_answers)}\n"
            "(II, IV, VI –∏ VII —Å—Ç—É–ø–µ–Ω–∏)"
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
        wrong_notes = [n for n in selected_notes if n not in correct_answers]
        missing_notes = [n for n in correct_answers if n not in selected_notes]

        feedback = []
        if wrong_notes:
            feedback.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {', '.join(wrong_notes)}")
        if missing_notes:
            feedback.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {', '.join(missing_notes)}")

        response = (
            "‚ùå –ï—Å—Ç—å –æ—à–∏–±–∫–∏:\n"
            f"{'; '.join(feedback)}\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(correct_answers)}\n"
            "(–ù–µ—É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏ - —ç—Ç–æ II, IV, VI –∏ VII —Å—Ç—É–ø–µ–Ω–∏ –≥–∞–º–º—ã)"
        )

    user_states[user_id] = user_state
    await message.answer(response)
    await asyncio.sleep(2)
    await unstable_degrees_game(message)  # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å

def rename_audio_files():
    audio_mapping = {
        "do.mp3": "3f27a6.mp3",
        "re.mp3": "8b1a99.mp3",
        "mi.mp3": "e4da3b.mp3",
        "fa.mp3": "a87ff6.mp3",
        "sol.mp3": "e4da3c.mp3",
        "la.mp3": "8b1a98.mp3",
        "si.mp3": "3f27a7.mp3"
    }

    for original, new_name in audio_mapping.items():
        original_path = AUDIO_DIR / original
        if original_path.exists():
            original_path.rename(AUDIO_DIR / new_name)
            logging.info(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω {original} –≤ {new_name}")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if AUDIO_DIR.exists():
    rename_audio_files()
else:
    logging.warning(f"–ü–∞–ø–∫–∞ —Å –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {AUDIO_DIR}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            'INSERT INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
            (user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
        )
        conn.commit()

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        reply_markup=get_main_keyboard()
    )


@dp.message(Command('help'))
async def help_command(message: types.Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—É—é —Ç–µ–æ—Ä–∏—é.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞—Å—Å–æ–≤
@dp.message(F.text.endswith("–∫–ª–∞—Å—Å"))
async def class_handler(message: types.Message):
    class_num = message.text.split(" ")[0]
    user_states[message.from_user.id] = {"current_class": class_num}

    if class_num == "1":
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è 1 –∫–ª–∞—Å—Å–∞:",
            reply_markup=get_first_class_keyboard()
        )
    else:
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∫–ª–∞—Å—Å–∞ {class_num}:",
            reply_markup=get_class_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
@dp.message(F.text == "–ù–æ—Ç—ã")
async def music_menu_handler(message: types.Message):
    await message.answer(
        "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=get_music_keyboard()
    )


@dp.message(F.text == "–ö–ª—é—á–∏")
async def clefs_intro(message: types.Message):
    user_states[message.from_user.id] = {
        "mode": "clef_quiz",
        "score": 0,
        "total": 0,
        "current_answer": None
    }

    await message.answer(
        "üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–∞–º!\n"
        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–æ–π –∫–ª—é—á –ø–æ–∫–∞–∑–∞–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:",
        reply_markup=get_clef_quiz_keyboard()
    )
    await send_random_clef(message)


async def send_random_clef(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].get("mode") != "clef_quiz":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ –º–µ–Ω—é")
        return

    clef_type = random.choice(list(CLEFS_DATA.keys()))
    clef = CLEFS_DATA[clef_type]
    user_states[user_id]["current_answer"] = clef_type

    try:
        with open(clef["image_path"], 'rb') as photo:
            await message.answer_photo(
                types.BufferedInputFile(photo.read(), filename="clef.png"),
                caption="–≠—Ç–æ —Å–∫—Ä–∏–ø–∏—á–Ω—ã–π –∏–ª–∏ –±–∞—Å–æ–≤—ã–π –∫–ª—é—á?",
                reply_markup=get_clef_quiz_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {clef['name']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {clef['description']}",
            reply_markup=get_clef_quiz_keyboard()
        )


@dp.message(F.text.in_(["–°–∫—Ä–∏–ø–∏—á–Ω—ã–π", "–ë–∞—Å–æ–≤—ã–π"]))
async def check_clef_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].get("mode") != "clef_quiz":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–Ω–∞—á–∞–ª–∞")
        return

    if "current_answer" not in user_states[user_id]:
        await message.answer("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
        await clefs_intro(message)
        return

    user_answer = message.text
    correct_type = user_states[user_id]["current_answer"]
    correct_name = CLEFS_DATA[correct_type]["name"]

    user_states[user_id]["total"] += 1
    is_correct = (user_answer == "–°–∫—Ä–∏–ø–∏—á–Ω—ã–π" and correct_type == "treble") or \
                 (user_answer == "–ë–∞—Å–æ–≤—ã–π" and correct_type == "bass")

    if is_correct:
        user_states[user_id]["score"] += 1
        response = f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ {correct_name}"
    else:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –≠—Ç–æ {correct_name}"

    await message.answer(
        f"{response}\n{CLEFS_DATA[correct_type]['description']}",
        reply_markup=get_clef_quiz_keyboard()
    )
    await asyncio.sleep(1)
    await send_random_clef(message)


@dp.message(F.text == "–ù–æ—Ç—ã –≤ —Å–∫—Ä–∏–ø–∏—á–Ω–æ–º –∫–ª—é—á–µ")
async def start_treble_quiz(message: types.Message):
    user_states[message.from_user.id] = {
        "mode": "treble_quiz",
        "score": 0,
        "total": 0,
        "current_note": None
    }
    await message.answer(
        "üéº –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–æ—Ç—ã –≤ —Å–∫—Ä–∏–ø–∏—á–Ω–æ–º –∫–ª—é—á–µ!\n"
        "–Ø –ø–æ–∫–∞–∂—É –Ω–æ—Ç—É - –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        reply_markup=get_note_quiz_keyboard()
    )
    await send_random_treble_note(message)


async def send_random_treble_note(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].get("mode") != "treble_quiz":
        return

    note_name, note_data = random.choice(list(NOTES_TREBLE.items()))
    user_states[user_id]["current_note"] = note_name

    try:
        with open(note_data["image_path"], 'rb') as photo:
            await message.answer_photo(
                types.BufferedInputFile(photo.read(), filename="note.png"),
                caption="–ö–∞–∫–∞—è —ç—Ç–æ –Ω–æ—Ç–∞?",
                reply_markup=get_note_quiz_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ—Ç—ã: {e}")
        await message.answer(
            f"–ù–æ—Ç–∞ {note_name} {note_data['octave']}",
            reply_markup=get_note_quiz_keyboard()
        )


@dp.message(F.text == "–ù–æ—Ç—ã –≤ –±–∞—Å–æ–≤–æ–º –∫–ª—é—á–µ")
async def start_bass_quiz(message: types.Message):
    user_states[message.from_user.id] = {
        "mode": "bass_quiz",
        "score": 0,
        "total": 0,
        "current_note": None
    }
    await message.answer(
        "üéµ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–æ—Ç—ã –≤ –±–∞—Å–æ–≤–æ–º –∫–ª—é—á–µ!\n"
        "–Ø –ø–æ–∫–∞–∂—É –Ω–æ—Ç—É - –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        reply_markup=get_note_quiz_keyboard()
    )
    await send_random_bass_note(message)


async def send_random_bass_note(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].get("mode") != "bass_quiz":
        return

    note_name, note_data = random.choice(list(NOTES_BASS.items()))
    user_states[user_id]["current_note"] = note_name

    try:
        with open(note_data["image_path"], 'rb') as photo:
            await message.answer_photo(
                types.BufferedInputFile(photo.read(), filename="note.png"),
                caption="–ö–∞–∫–∞—è —ç—Ç–æ –Ω–æ—Ç–∞?",
                reply_markup=get_note_quiz_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ—Ç—ã: {e}")
        await message.answer(
            f"–ù–æ—Ç–∞ {note_name} {note_data['octave']}",
            reply_markup=get_note_quiz_keyboard()
        )


@dp.message(F.text == "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
async def start_keyboard_quiz(message: types.Message):
    user_states[message.from_user.id] = {
        "mode": "keyboard_quiz",
        "score": 0,
        "total": 0,
        "current_note": None
    }
    await message.answer(
        "üéπ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!\n"
        "–Ø –ø–æ–∫–∞–∂—É –∫–ª–∞–≤–∏—à—É - –≤—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ –µ—ë –Ω–æ—Ç—É.",
        reply_markup=get_note_quiz_keyboard()
    )
    await send_random_keyboard_note(message)


async def send_random_keyboard_note(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].get("mode") != "keyboard_quiz":
        return

    note_name, note_data = random.choice(list(KEYBOARD_NOTES.items()))
    user_states[user_id]["current_note"] = note_name

    try:
        with open(note_data["image_path"], 'rb') as photo:
            await message.answer_photo(
                types.BufferedInputFile(photo.read(), filename="keyboard.png"),
                caption="–ö–∞–∫–∞—è —ç—Ç–æ –Ω–æ—Ç–∞?",
                reply_markup=get_note_quiz_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        await message.answer(
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ",
            reply_markup=get_note_quiz_keyboard()
        )


@dp.message(F.text == "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ—Ç")
async def start_note_letters_quiz(message: types.Message):
    user_states[message.from_user.id] = {
        "mode": "note_letters_quiz",
        "score": 0,
        "total": 0,
        "current_note": None
    }
    await message.answer(
        "üî§ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –±—É–∫–≤–µ–Ω–Ω—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º –Ω–æ—Ç!\n"
        "–Ø –ø–æ–∫–∞–∂—É –Ω–æ—Ç—É - –≤—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ –µ—ë –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ.",
        reply_markup=get_note_letters_keyboard()
    )
    await send_random_note_letter(message)


async def send_random_note_letter(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].get("mode") != "note_letters_quiz":
        return

    note_letter, note_data = random.choice(list(NOTE_LETTERS.items()))
    user_states[user_id]["current_note"] = note_letter

    try:
        with open(note_data["image_path"], 'rb') as photo:
            await message.answer_photo(
                types.BufferedInputFile(photo.read(), filename="note_letter.png"),
                caption="–ö–∞–∫–æ–µ –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–π –Ω–æ—Ç—ã?",
                reply_markup=get_note_letters_keyboard()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ—Ç—ã: {e}")
        await message.answer(
            f"–ù–æ—Ç–∞: {note_data['name']}",
            reply_markup=get_note_letters_keyboard()
        )


@dp.message(F.text == "–ù–æ—Ç—ã –Ω–∞ —Å–ª—É—Ö")
async def start_audio_notes_quiz(message: types.Message):
    user_states[message.from_user.id] = {
        "mode": "audio_notes_quiz",
        "score": 0,
        "total": 0,
        "current_note": None
    }
    await message.answer(
        "üéµ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –Ω–æ—Ç–∞–º –Ω–∞ —Å–ª—É—Ö!\n"
        "–Ø —Å—ã–≥—Ä–∞—é –Ω–æ—Ç—É - –≤—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        reply_markup=get_note_quiz_keyboard()
    )
    await send_random_audio_note(message)


async def send_random_audio_note(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_states or user_states[user_id].get("mode") != "audio_notes_quiz":
        return

    note_name, note_data = random.choice(list(AUDIO_NOTES.items()))
    user_states[user_id]["current_note"] = note_name

    try:
        audio = types.FSInputFile(note_data["audio_path"])
        await message.answer_audio(
            audio,
            reply_markup=get_note_quiz_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_note_quiz_keyboard()
        )


@dp.message(F.text == "–°—Ç—É–ø–µ–Ω–∏ –≤ –≥–∞–º–º–µ")
async def scale_structure(message: types.Message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    if user_id not in user_states or user_states[user_id].get("mode") != "scale_quiz":
        user_states[user_id] = {
            "mode": "scale_quiz",
            "score": 0,
            "total": 0
        }

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥–∞–º–º—É –∏ —Å—Ç—É–ø–µ–Ω—å
    scale_name = random.choice(list(Scales)).value
    scale = Scales(scale_name)
    degree_num = random.randint(1, 7)
    degree = ["I", "II", "III", "IV", "V", "VI", "VII"][degree_num - 1]
    correct_note = SCALE_NOTES[scale][degree_num - 1]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    user_states[user_id].update({
        "current_scale": scale_name,
        "current_degree": degree,
        "current_answer": correct_note
    })

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    degree_names = {
        "I": "—Ç–æ–Ω–∏—á–µ—Å–∫—É—é (I)",
        "II": "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π –≤–≤–æ–¥–Ω—ã–π (II)",
        "III": "–º–µ–¥–∏–∞–Ω—Ç—É (III)",
        "IV": "—Å—É–±–¥–æ–º–∏–Ω–∞–Ω—Ç—É (IV)",
        "V": "–¥–æ–º–∏–Ω–∞–Ω—Ç—É (V)",
        "VI": "—Å—É–±–º–µ–¥–∏–∞–Ω—Ç—É (VI)",
        "VII": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π –≤–≤–æ–¥–Ω—ã–π (VII)"
    }

    question = f"üéº –ù–∞–∑–æ–≤–∏—Ç–µ –Ω–æ—Ç—É –¥–ª—è {degree_names[degree]} —Å—Ç—É–ø–µ–Ω–∏ –≤ –≥–∞–º–º–µ {scale_name}:"

    await message.answer(
        question,
        reply_markup=get_note_quiz_keyboard()
    )
@dp.message(F.text == "–£—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏")
async def stable_degrees(message: types.Message):
    await message.answer(
        "–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°—Ç—É–ø–µ–Ω–∏ –≤ –≥–∞–º–º–µ")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text.in_(["–î–æ", "–†–µ", "–ú–∏", "–§–∞", "–°–æ–ª—å", "–õ—è", "–°–∏"]))
async def check_note_answer(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    mode = user_state.get("mode")

    if not mode:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á–µ—Ä–µ–∑ –º–µ–Ω—é")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Å—Ç—É–ø–µ–Ω—è–º –≥–∞–º–º—ã
    if mode == "scale_quiz":
        degree = user_state.get("current_degree")
        correct_note = user_state.get("current_answer")
        scale_name = user_state.get("current_scale")

        if None in [degree, correct_note, scale_name]:
            await message.answer("–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ")
            return

        user_answer = message.text.lower()
        user_state["total"] += 1

        if user_answer == correct_note:
            user_state["score"] += 1
            response = f"‚úÖ –í–µ—Ä–Ω–æ! {degree} —Å—Ç—É–ø–µ–Ω—å –≤ –≥–∞–º–º–µ {scale_name} - —ç—Ç–æ {correct_note}"
        else:
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! {degree} —Å—Ç—É–ø–µ–Ω—å –≤ –≥–∞–º–º–µ {scale_name} - —ç—Ç–æ {correct_note}"

        await message.answer(response)

        # –ó–∞–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await scale_structure(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω–µ–µ)
    current_note = user_state.get("current_note")
    if not current_note:
        await message.answer("–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == "treble_quiz":
        correct_note = current_note.replace("2", "")
        octave_info = NOTES_TREBLE[current_note]["octave"]
    elif mode == "bass_quiz":
        correct_note = current_note.split("_")[0]
        octave_info = NOTES_BASS[current_note]["octave"]
    elif mode == "keyboard_quiz":
        correct_note = current_note.replace("2", "")
        octave_info = ""
    elif mode == "audio_notes_quiz":
        correct_note = current_note
        octave_info = AUDIO_NOTES[current_note]["octave"]
    elif mode == "note_letters_quiz":
        correct_note = current_note
        note_name = NOTE_LETTERS[correct_note]["name"]
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
        return

    user_answer = message.text.lower()
    user_state["total"] += 1

    if mode == "note_letters_quiz":
        if user_answer == correct_note.lower():
            user_state["score"] += 1
            response = f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ –Ω–æ—Ç–∞ {note_name}"
        else:
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –Ω–æ—Ç–∞ {note_name}"
    else:
        if user_answer == correct_note:
            user_state["score"] += 1
            response = f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ –Ω–æ—Ç–∞ {correct_note}"
            if octave_info:
                response += f" {octave_info}"
        else:
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –Ω–æ—Ç–∞ {correct_note}"
            if octave_info:
                response += f" {octave_info}"

    await message.answer(response,
                         reply_markup=get_note_quiz_keyboard() if mode != "note_letters_quiz" else get_note_letters_keyboard())
    await asyncio.sleep(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if mode == "treble_quiz":
        await send_random_treble_note(message)
    elif mode == "bass_quiz":
        await send_random_bass_note(message)
    elif mode == "keyboard_quiz":
        await send_random_keyboard_note(message)
    elif mode == "audio_notes_quiz":
        await send_random_audio_note(message)
    elif mode == "note_letters_quiz":
        await send_random_note_letter(message)


@dp.message(F.text.in_(["C", "D", "E", "F", "G", "A", "B"]))
async def check_note_letter_answer(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    mode = user_state.get("mode")

    if mode != "note_letters_quiz":
        return

    current_note = user_state.get("current_note")
    if not current_note:
        await message.answer("–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ")
        return

    user_answer = message.text
    correct_note = current_note
    note_name = NOTE_LETTERS[correct_note]["name"]

    user_states[user_id]["total"] += 1

    if user_answer == correct_note:
        user_states[user_id]["score"] += 1
        response = f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ –Ω–æ—Ç–∞ {note_name}"
    else:
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –≠—Ç–æ –Ω–æ—Ç–∞ {note_name}"

    await message.answer(response, reply_markup=get_note_letters_keyboard())
    await asyncio.sleep(1)
    await send_random_note_letter(message)


@dp.message(F.text == "–ù–æ—Ç—ã –≤ –ø–µ—Å–Ω—è—Ö")
async def songs_menu(message: types.Message):
    await message.answer(
        "üé∂ –í—ã–±–µ—Ä–∏ –ø–µ—Å–Ω—é –∏ —Å–ø–æ–π –µ—ë –ø–æ –Ω–æ—Ç–∞–º!",
        reply_markup=get_songs_keyboard()
    )


@dp.message(F.text.in_(SONGS.keys()))
async def send_song_notes(message: types.Message):
    song_name = message.text
    song_data = SONGS[song_name]

    try:
        with open(song_data["image_path"], 'rb') as photo:
            await message.answer_photo(
                types.BufferedInputFile(photo.read(), filename="song.png"),
                caption=f"üéµ {song_name}\n"
                        f"–ù–æ—Ç—ã: {song_data['notes']}\n\n"
                        f"–°–ø–æ–π —ç—Ç—É –º–µ–ª–æ–¥–∏—é –∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                    resize_keyboard=True
                )
            )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[message.from_user.id] = {
            "mode": "song_recording",
            "song_name": song_name
        }
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–Ω–∏: {e}")


@dp.message(F.voice)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})

    if user_state.get("mode") != "song_recording":
        return

    song_name = user_state.get("song_name")
    voice_file_id = message.voice.file_id

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ –±–∞–∑—É
        cursor.execute(
            '''INSERT INTO voice_notes 
            (user_id, username, first_name, last_name, song_name, voice_file_id, submission_time)
            VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (
                user_id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name,
                song_name,
                voice_file_id,
                datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            )
        )
        conn.commit()
        submission_id = cursor.lastrowid

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
        await message.answer(
            "‚úÖ –¢–≤–æ—ë –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∏—Ç–µ–ª—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            "–°–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—à—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
            reply_markup=get_music_keyboard()
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —É—á–∏—Ç–µ–ª—é
        try:
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.send_voice(
                chat_id=5157087391,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID
                voice=voice_file_id,
                caption=f"üéµ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (#{submission_id}) –æ—Ç @{message.from_user.username}:\n"
                        f"–ü–µ—Å–Ω—è: {song_name}\n"
                        f"–£—á–µ–Ω–∏–∫: {message.from_user.full_name}\n"
                        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                reply_markup=get_review_keyboard(submission_id)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—é: {e}", exc_info=True)
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
            await bot.send_message(
                chat_id=5157087391,
                text=f"üéµ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (#{submission_id}) –æ—Ç @{message.from_user.username}:\n"
                     f"–ü–µ—Å–Ω—è: {song_name}\n–£—á–µ–Ω–∏–∫: {message.from_user.full_name}\n"
                     f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                     f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {voice_file_id}",
                reply_markup=get_review_keyboard(submission_id)
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_music_keyboard()
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {}


@dp.callback_query(F.data.startswith("review_"))
async def process_review(callback: types.CallbackQuery):
    _, submission_id, grade = callback.data.split('_')

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    cursor.execute(
        "UPDATE voice_notes SET status = ? WHERE id = ?",
        (f"–û—Ü–µ–Ω–µ–Ω–æ: {grade}", submission_id)
    )
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ
    cursor.execute(
        "SELECT user_id, song_name FROM voice_notes WHERE id = ?",
        (submission_id,)
    )
    user_id, song_name = cursor.fetchone()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É
    feedback = {
        '5': "üéâ –û—Ç–ª–∏—á–Ω–æ! 5 –±–∞–ª–ª–æ–≤!",
        '4': "üòä –•–æ—Ä–æ—à–æ! 4 –±–∞–ª–ª–∞!",
        '3': "ü§î –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. 3 –±–∞–ª–ª–∞.",
        '2': "üëé –ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å. 2 –±–∞–ª–ª–∞."
    }.get(grade, "–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –æ—Ü–µ–Ω–µ–Ω–∞.")

    await bot.send_message(
        chat_id=user_id,
        text=f"–í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø–æ –ø–µ—Å–Ω–µ '{song_name}':\n{feedback}"
    )

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —É—á–∏—Ç–µ–ª—è
    await callback.answer("–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await callback.message.edit_reply_markup()


@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_handler(message: types.Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id, {})
    mode = user_state.get("mode", "")
    current_class = user_state.get("current_class", "")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω
    if mode in ["scale_quiz", "treble_quiz", "bass_quiz",
                "keyboard_quiz", "note_letters_quiz", "audio_notes_quiz",
                "clef_quiz", "stable_degrees"]:

        score = user_state.get("score", 0)
        total = user_state.get("total", 0)

        quiz_names = {
            "scale_quiz": "–ø–æ —Å—Ç—É–ø–µ–Ω—è–º –≥–∞–º–º—ã",
            "treble_quiz": "–ø–æ –Ω–æ—Ç–∞–º –≤ —Å–∫—Ä–∏–ø–∏—á–Ω–æ–º –∫–ª—é—á–µ",
            "bass_quiz": "–ø–æ –Ω–æ—Ç–∞–º –≤ –±–∞—Å–æ–≤–æ–º –∫–ª—é—á–µ",
            "keyboard_quiz": "–ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ",
            "note_letters_quiz": "–ø–æ –±—É–∫–≤–µ–Ω–Ω—ã–º –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º –Ω–æ—Ç",
            "audio_notes_quiz": "–ø–æ –Ω–æ—Ç–∞–º –Ω–∞ —Å–ª—É—Ö",
            "clef_quiz": "–ø–æ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–∞–º",
            "stable_degrees": "–Ω–∞ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏"
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_message = (
            f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ {quiz_names.get(mode, '')} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total}"
        )

        # –î–ª—è —Ä–µ–∂–∏–º–∞ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å—Ç—É–ø–µ–Ω–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        if mode == "stable_degrees":
            result_message += (
                "\n\n–ó–∞–ø–æ–º–Ω–∏: —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏ - —ç—Ç–æ I, III –∏ V —Å—Ç—É–ø–µ–Ω–∏ –≥–∞–º–º—ã"
            )

        await message.answer(
            result_message,
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–°—Ç—É–ø–µ–Ω–∏ –≤ –≥–∞–º–º–µ")],
                    [KeyboardButton(text="–£—Å—Ç–æ–π—á–∏–≤—ã–µ —Å—Ç—É–ø–µ–Ω–∏")],
                    [KeyboardButton(text="–ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å
        user_state["mode"] = f"class_{current_class}" if current_class else ""
        return

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–ª–∞—Å—Å–∞
    if mode.startswith("class_"):
        class_num = mode.split("_")[1]
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è {class_num} –∫–ª–∞—Å—Å–∞:",
            reply_markup=get_class_keyboard()
        )
        user_state["mode"] = ""
        return

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –º–µ—Å—Ç–∞
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    user_state["mode"] = ""


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        conn.close()